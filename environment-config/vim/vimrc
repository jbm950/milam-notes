set nocompatible " Don't try to be backwards compatible with vi


"""""" Display Settings ---------------------- {{{1
set showmatch " set to show matching parenthesis
set showmode " always show what mode we're currently editing in

" Color and highlight properly
syntax enable
highlight Normal ctermfg=grey ctermbg=black
let python_highlight_all=1
colorscheme mywombat256

" Set vertical lines at 80 and 100 characters
set colorcolumn=80,100

" No terminal bell (visual flash)
set t_vb=

" Disable auto-resizing on window closes
set noequalalways


"""""" Keybind Changes ---------------------- {{{1
" Easier to indent and unindent code blocks
vnoremap < <gv
vnoremap > >gv

" Easy wrapping visual selections
vnoremap <space>w" <esc>`<i"<esc>`>la"<esc>
vnoremap <space>w' <esc>`<i'<esc>`>la'<esc>
vnoremap <space>w` <esc>`<i`<esc>`>la`<esc>
vnoremap <space>w{ <esc>`<i{<esc>`>la}<esc>
vnoremap <space>w[ <esc>`<i[<esc>`>la]<esc>
vnoremap <space>w( <esc>`<i(<esc>`>la)<esc>

" Maintain register paste
nnoremap <space>p pgvy
vnoremap <space>p pgvy

" Easy window switching
nnoremap <C-h> <C-w>h
let g:C_Ctrl_j = 'off'
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Move through local fix entries easier
nnoremap ]q :lnext<CR>
nnoremap [q :lprevious<CR>
nnoremap <expr> [w empty(filter(getwininfo(), 'v:val.loclist')) ? ':lopen<CR>' : ':lclose<CR>'

" Exit insert mode more easily
inoremap jk <esc>

" Change word delete in insert mode
inoremap <C-L> <C-W>

" Easy terminal open
nnoremap <space>b :bel term<CR>

" Exit the terminal window more easily
tnoremap <C-F> <C-W>N
tnoremap <C-G> <C-W>Ngt

" Toggle options
nnoremap coh :set hlsearch! hlsearch?<CR>
nnoremap cov :call ToggleVirtualEdit()<CR>
nnoremap cos :set spell! spell?<CR>

" Flip tabs and run pytest in the left most window
nnoremap <C-p> 2gt9<C-w>hipytest -v .<CR>

" Mapping to toggle a netrw tree listing
nnoremap <C-n> :call ToggleNetrw()<CR>

" Quickly edit and reload vimrc
nnoremap <leader>ev :split $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>


"""""" General ---------------------- {{{1
" Code Folding
set foldmethod=indent
set foldlevel=99

" Make backspace work as expected
set backspace=indent,eol,start

" Set the tab key to put 4 spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Don't auto word wrap
set textwidth=0

" Show the line numbers in each window
set number

" Show the distance of each line from the line with the cursor
set relativenumber

" Allow recursive file searching
set path+=**

" Show matches while typing out search pattern
set incsearch

" Display all matching files when we tab complete
set wildmenu

" Add my custom help documents to the vim help system
helptags ~/.vim/doc

" Incorporate ripgrep for searching when present
if executable('rg')
    set grepprg=rg\ --vimgrep\ --smart-case
endif
 
"""""" Custom Commands ---------------------- {{{1
command FourWinTwoTerm call FourWinTwoTermFunc()
command TwoWinOneTerm call TwoWinOneTermFunc()
command TagGenerate call TagGenerateFunc()


"""""" Custom Functions ---------------------- {{{1
""" FourWinTwoTermFunc() {{{2
function! FourWinTwoTermFunc()
    for win_num in [1, 2, 3]
        vsplit
    endfor
    execute "normal \<C-W>l2\<C-W>>"
    tabnew
    vsplit
    execute "normal 2\<C-W>>"
    for term_num in [1, 2]
        term ++curwin
        execute "normal \<C-W>l"
    endfor
    tabnext
    execute "normal \<C-W>h"
endfunction

""" TwoWinOneTermFunc() {{{2
function! TwoWinOneTermFunc()
    vsplit
    tabnew
    term ++curwin
    tabnext
endfunction

""" ToggleVirtualEdit() {{{2
function! ToggleVirtualEdit()
    if &virtualedit ==# "all"
        set virtualedit=
        echo "virtualedit="
    else
        set virtualedit=all
        echo "virtualedit=all"
    endif
endfunction

""" TagGenerateFunc() {{{2
function! TagGenerateFunc()
    silent !python "$MILAM_NOTES_REPO_DIR/pytags.py" "."
    redraw!
endfunction


""""""" Filetype Specific Settings ---------------------- {{{1
filetype plugin on

""" Multiple file type settings ---------------------- {{{2
" Associate different extensions for different filetypes
augroup suffixes
    autocmd!

    let associations = [
                \["javascript", ".js,.javascript,.es,.esx,.json"],
                \["python", ".py,.pyw"],
                \["markdown", ".md"]
                \]

    for ft in associations
        execute "autocmd FileType " . ft[0] . " setlocal suffixesadd=" . ft[1]
    endfor
augroup END

""" Markdown file settings---------------------- {{{2
augroup filetype_markdown
    autocmd!
    autocmd Filetype markdown setlocal foldmethod=expr
    autocmd Filetype markdown setlocal foldexpr=MarkdownFold()
    autocmd Filetype markdown setlocal foldlevelstart=99
augroup END

""" Vimscript file settings ---------------------- {{{2
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END


""""""" Plugin Specific Settings ---------------------- {{{1
""" netrw ---------------------- {{{2
let g:netrw_banner = 0 " get rid of giant banner
let g:netrw_liststyle = 3 " folder tree view

" Function to toggle netrw
function! ToggleNetrw()
    if bufwinnr("NetrwTreeListing") < 0
        let g:PrevBuffer = bufnr("%")
        silent Explore
    else
        execute "buffer" g:PrevBuffer
    endif
endfunction
