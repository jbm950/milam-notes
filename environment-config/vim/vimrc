set nocompatible " Don't try to be backwards compatible with vi


"""""" Display Settings
set showmatch " set to show matching parenthesis
set showmode " always show what mode we're currently editing in

" Color and highlight properly
syntax enable
highlight Normal ctermfg=grey ctermbg=black
let python_highlight_all=1
colorscheme wombat256

" Set vertical lines at 80 and 100 characters
set colorcolumn=80,100


"""""" Keybind Changes
" easier to indent and unindent code blocks
vnoremap < <gv
vnoremap > >gv

" Easy window switching
nmap <C-h> <C-w>h
let g:C_Ctrl_j = 'off'
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

" Move through local fix entries easier
nnoremap ]q :lnext<CR>
nnoremap [q :lprevious<CR>
nnoremap <expr> [w empty(filter(getwininfo(), 'v:val.loclist')) ? ':lopen<CR>' : ':lclose<CR>'

" Exit the terminal window more easily
tmap <C-F> <C-W>N
tmap <C-G> <C-W>Ngt

" Toggle options
nnoremap coh :set hlsearch! hlsearch?<CR>

" Flip tabs and run pytest in the left most window
nnoremap <C-p> 2gt9<C-w>hipytest -v .<CR>

" Mapping to toggle a netrw tree listing
nnoremap <C-n> :call ToggleNetrw()<CR>

" Notes Related Mappings
nnoremap <leader>nd :OpenDailyNote<CR>
nnoremap <leader>nw :OpenWeeklyNote<CR>
nnoremap <leader>nm :OpenMonthlyNote<CR>
nnoremap <leader>na :edit $NOTES_DIR/activity-planner.md<CR>
nnoremap <leader>np :edit $NOTES_DIR/Productivity/Projects/_Project_Main.md<CR>
nnoremap <leader>nh :edit $NOTES_DIR/_Home.md<CR>
nnoremap <leader>nt :!grep -rPoh --include=*.md
    \ --exclude-dir=Journal --exclude-dir=Productivity --exclude-dir=Templates
    \ "\s(\#[^\s\#]*)" .
    \ <bar> sort -u<CR>

" Python Related Mappings
nnoremap <leader>pl :PylintLopen<CR>


"""""" General
" Code Folding
set foldmethod=indent
set foldlevel=99

" Make backspace work as expected
set backspace=indent,eol,start

" Set the tab key to put 4 spaces
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab

" Don't auto word wrap
set textwidth=0

" Show the line numbers in each window
set nu

" Allow recursive file searching
set path+=**

" Display all matching files when we tab complete
set wildmenu
 
 
"""""" Custom Commands
command NewDailyNote silent !python "$MILAM_NOTES_REPO_DIR/new_daily_note.py" "$NOTES_DIR/Journal/Daily"
command OpenDailyNote call OpenDailyNoteFunc()

command NewWeeklyNote silent !python "$MILAM_NOTES_REPO_DIR/new_weekly_note.py" "$NOTES_DIR/Journal/Weekly"
command OpenWeeklyNote call OpenWeeklyNoteFunc()

command NewMonthlyNote silent !python "$MILAM_NOTES_REPO_DIR/new_monthly_note.py" "$NOTES_DIR/Journal/Monthly"
command OpenMonthlyNote call OpenMonthlyNoteFunc()

command FourWinTwoTerm call FourWinTwoTermFunc()
command TwoWinOneTerm call TwoWinOneTermFunc()

command PylintLopen lex system('pylint "'..expand('%:p')..'" | tail -n +2 | head -n -4') | lopen


"""""" Custom Functions
function! OpenDailyNoteFunc()
    let g:DailyNotePath = "$NOTES_DIR/Journal/Daily/" . strftime("%Y-%m-%d") . ".md"
    if filereadable(g:DailyNotePath)
        ""
    else
        NewDailyNote
        execute "redraw!"
    endif
    execute "edit " . g:DailyNotePath
endfunction

function! OpenWeeklyNoteFunc()
    let g:WeeklyNotePath = "$NOTES_DIR/Journal/Weekly/" . strftime("%Y-W%V") . ".md"
    if filereadable(g:WeeklyNotePath)
        ""
    else
        NewWeeklyNote
        execute "redraw!"
    endif
    execute "edit " . g:WeeklyNotePath
endfunction

function! OpenMonthlyNoteFunc()
    let g:MonthlyNotePath = "$NOTES_DIR/Journal/Monthly/" . strftime("%Y-%m") . ".md"
    if filereadable(g:MonthlyNotePath)
        ""
    else
        NewMonthlyNote
        execute "redraw!"
    endif
    execute "edit " . g:MonthlyNotePath
endfunction

function! FourWinTwoTermFunc()
    for win_num in [1, 2, 3]
        vsplit
    endfor
    execute "normal \<C-W>l2\<C-W>>"
    tabnew
    vsplit
    execute "normal 2\<C-W>>"
    for term_num in [1, 2]
        term ++curwin
        execute "normal \<C-W>l"
    endfor
    tabnext
    execute "normal \<C-W>h"
endfunction

function! TwoWinOneTermFunc()
    vsplit
    tabnew
    term ++curwin
    tabnext
endfunction


""""""" Filetype Specific Settings
filetype plugin on

""" Associate different extensions for different filetypes
augroup suffixes
    autocmd!

    let associations = [
                \["javascript", ".js,.javascript,.es,.esx,.json"],
                \["python", ".py,.pyw"],
                \["markdown", ".md"]
                \]

    for ft in associations
        execute "autocmd FileType " . ft[0] . " setlocal suffixesadd=" . ft[1]
    endfor
augroup END

""" Python
" Flag lines with just whitespace for python files
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw, match BadWhitespace /\s\+$/


""""""" Plugin Specific Settings
""" netrw
let g:netrw_banner = 0 " get rid of giant banner
let g:netrw_liststyle = 3 " folder tree view

" Function to toggle netrw
function! ToggleNetrw()
    if bufwinnr("NetrwTreeListing") < 0
        let g:PrevBuffer = bufnr("%")
        silent Explore
    else
        execute "buffer" g:PrevBuffer
    endif
endfunction
